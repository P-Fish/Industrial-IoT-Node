
bin/Debug/mod3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000674  00000708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  0000064c  0000064c  000006e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000084  0080012a  0080012a  00000732  2**0
                  ALLOC
  4 .stab         00000aec  00000000  00000000  00000734  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000009a6  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00001bc6  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bd8  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00001c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  0000220c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  000027ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_18>
  4c:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3a       	cpi	r26, 0xAE	; 174
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 24 03 	jmp	0x648	; 0x648 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 *   nothing
 *
 * changes:
 *   The direction of pin b will be set to output by this function.
 */
void main() {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62

    DDRB |= 0x2;    // Set Pin B to Output
  ae:	84 e2       	ldi	r24, 0x24	; 36
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	24 e2       	ldi	r18, 0x24	; 36
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	20 81       	ld	r18, Z
  ba:	22 60       	ori	r18, 0x02	; 2
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
    uart_init();    // Initialize serial console
  c0:	0e 94 2c 02 	call	0x458	; 0x458 <uart_init>

    writestr("SER486 HW3 - Peter Fischbach\n\r");
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	0e 94 ad 00 	call	0x15a	; 0x15a <writestr>
    writehex8(0x0A);    // Write 0A to serial console
  cc:	8a e0       	ldi	r24, 0x0A	; 10
  ce:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <writehex8>
    writestr("\n\r");
  d2:	8f e1       	ldi	r24, 0x1F	; 31
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	0e 94 ad 00 	call	0x15a	; 0x15a <writestr>
    writehex16(0xC0DE); //  Write C0DE to serial console
  da:	8e ed       	ldi	r24, 0xDE	; 222
  dc:	90 ec       	ldi	r25, 0xC0	; 192
  de:	0e 94 46 01 	call	0x28c	; 0x28c <writehex16>
    writestr("\n\r");
  e2:	8f e1       	ldi	r24, 0x1F	; 31
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 ad 00 	call	0x15a	; 0x15a <writestr>

    while (1) {
        blink_led("--- -.-");   // Write "ok" to LED as morse code
  ea:	82 e2       	ldi	r24, 0x22	; 34
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 b7 01 	call	0x36e	; 0x36e <blink_led>
        delay(1500);    // Delay the next itteration of blink_led()
  f2:	8c ed       	ldi	r24, 0xDC	; 220
  f4:	95 e0       	ldi	r25, 0x05	; 5
  f6:	0e 94 7e 00 	call	0xfc	; 0xfc <delay>
    }
  fa:	f7 cf       	rjmp	.-18     	; 0xea <main+0x44>

000000fc <delay>:
 * future hardware changes.  Ideally a timer should be
 * used instead of a set of for loops.  Timers will be
 * taught later in the semester.
 */
void delay(unsigned int msec)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <delay+0x6>
 102:	00 d0       	rcall	.+0      	; 0x104 <delay+0x8>
 104:	00 d0       	rcall	.+0      	; 0x106 <delay+0xa>
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	9e 83       	std	Y+6, r25	; 0x06
 10c:	8d 83       	std	Y+5, r24	; 0x05
    volatile unsigned i,j ;  /* volatile prevents loops from being optimized away */

    /* outer loop, loops for specified number of milliseconds */
    for (i=0; i<msec; i++) {
 10e:	1a 82       	std	Y+2, r1	; 0x02
 110:	19 82       	std	Y+1, r1	; 0x01
 112:	12 c0       	rjmp	.+36     	; 0x138 <delay+0x3c>
        /* inner loop, loops for 1 millisecond delay */
        for (j=0;j<LOOPS_PER_MSEC;j++) {}
 114:	1c 82       	std	Y+4, r1	; 0x04
 116:	1b 82       	std	Y+3, r1	; 0x03
 118:	05 c0       	rjmp	.+10     	; 0x124 <delay+0x28>
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	9c 81       	ldd	r25, Y+4	; 0x04
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	9c 83       	std	Y+4, r25	; 0x04
 122:	8b 83       	std	Y+3, r24	; 0x03
 124:	8b 81       	ldd	r24, Y+3	; 0x03
 126:	9c 81       	ldd	r25, Y+4	; 0x04
 128:	88 3e       	cpi	r24, 0xE8	; 232
 12a:	93 40       	sbci	r25, 0x03	; 3
 12c:	b0 f3       	brcs	.-20     	; 0x11a <delay+0x1e>
void delay(unsigned int msec)
{
    volatile unsigned i,j ;  /* volatile prevents loops from being optimized away */

    /* outer loop, loops for specified number of milliseconds */
    for (i=0; i<msec; i++) {
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	9a 81       	ldd	r25, Y+2	; 0x02
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	9a 83       	std	Y+2, r25	; 0x02
 136:	89 83       	std	Y+1, r24	; 0x01
 138:	29 81       	ldd	r18, Y+1	; 0x01
 13a:	3a 81       	ldd	r19, Y+2	; 0x02
 13c:	8d 81       	ldd	r24, Y+5	; 0x05
 13e:	9e 81       	ldd	r25, Y+6	; 0x06
 140:	28 17       	cp	r18, r24
 142:	39 07       	cpc	r19, r25
 144:	38 f3       	brcs	.-50     	; 0x114 <delay+0x18>
        /* inner loop, loops for 1 millisecond delay */
        for (j=0;j<LOOPS_PER_MSEC;j++) {}
    }
}
 146:	00 00       	nop
 148:	26 96       	adiw	r28, 0x06	; 6
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <writestr>:
 * NOTE: uart_init() should be called this function
 *   is invoked for the first time or unpredictable
 *   UART behavior may result.
 */
void writestr(char * str)
{
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	00 d0       	rcall	.+0      	; 0x160 <writestr+0x6>
 160:	00 d0       	rcall	.+0      	; 0x162 <writestr+0x8>
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	9c 83       	std	Y+4, r25	; 0x04
 168:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int i;

    /* loop for each character in the string */
    for (i=0; str[i]!=0;i++) {
 16a:	1a 82       	std	Y+2, r1	; 0x02
 16c:	19 82       	std	Y+1, r1	; 0x01
 16e:	0f c0       	rjmp	.+30     	; 0x18e <writestr+0x34>
        /* output the character to the UART */
        uart_writechar(str[i]);
 170:	2b 81       	ldd	r18, Y+3	; 0x03
 172:	3c 81       	ldd	r19, Y+4	; 0x04
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	9a 81       	ldd	r25, Y+2	; 0x02
 178:	82 0f       	add	r24, r18
 17a:	93 1f       	adc	r25, r19
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	0e 94 30 02 	call	0x460	; 0x460 <uart_writechar>
void writestr(char * str)
{
    unsigned int i;

    /* loop for each character in the string */
    for (i=0; str[i]!=0;i++) {
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	9a 81       	ldd	r25, Y+2	; 0x02
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	9a 83       	std	Y+2, r25	; 0x02
 18c:	89 83       	std	Y+1, r24	; 0x01
 18e:	2b 81       	ldd	r18, Y+3	; 0x03
 190:	3c 81       	ldd	r19, Y+4	; 0x04
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	9a 81       	ldd	r25, Y+2	; 0x02
 196:	82 0f       	add	r24, r18
 198:	93 1f       	adc	r25, r19
 19a:	fc 01       	movw	r30, r24
 19c:	80 81       	ld	r24, Z
 19e:	88 23       	and	r24, r24
 1a0:	39 f7       	brne	.-50     	; 0x170 <writestr+0x16>
        /* output the character to the UART */
        uart_writechar(str[i]);
    }
}
 1a2:	00 00       	nop
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <writehex8>:
 * NOTE: uart_init() should be called this function
 *  is invoked for the first time or unpredictable
 *  UART behavior may result.
*/
void writehex8(unsigned char num)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <writehex8+0x6>
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <writehex8+0x8>
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <writehex8+0xa>
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	8e 83       	std	Y+6, r24	; 0x06
    /* Initialize variables */
    unsigned char shift = 0;    /* Value that represents which 4 bits to look at */
 1c2:	19 82       	std	Y+1, r1	; 0x01
    char chars[2];  /* Initialize chars array to hold each 4 bit hex value */
    char index = sizeof(chars)-1;   /* Starting the index at the end to store the values in order */
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	8a 83       	std	Y+2, r24	; 0x02
    
    /* Loop through each 4 bit value */
    while (index >= 0) {
 1c8:	22 c0       	rjmp	.+68     	; 0x20e <writehex8+0x5c>
        * multiply current shift by 4 to get the current 4 bit value
        * store the 4 bit value into the chars array using and and mask
        * decrement index for next loop
        * increment shift for next loop
        */
        chars[index--] = (num >> (4 * shift++)) & 0x0F; 
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	98 2f       	mov	r25, r24
 1ce:	91 50       	subi	r25, 0x01	; 1
 1d0:	9a 83       	std	Y+2, r25	; 0x02
 1d2:	08 2e       	mov	r0, r24
 1d4:	00 0c       	add	r0, r0
 1d6:	99 0b       	sbc	r25, r25
 1d8:	2e 81       	ldd	r18, Y+6	; 0x06
 1da:	22 2f       	mov	r18, r18
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	49 81       	ldd	r20, Y+1	; 0x01
 1e0:	51 e0       	ldi	r21, 0x01	; 1
 1e2:	54 0f       	add	r21, r20
 1e4:	59 83       	std	Y+1, r21	; 0x01
 1e6:	44 2f       	mov	r20, r20
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	44 0f       	add	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	44 0f       	add	r20, r20
 1f0:	55 1f       	adc	r21, r21
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <writehex8+0x46>
 1f4:	35 95       	asr	r19
 1f6:	27 95       	ror	r18
 1f8:	4a 95       	dec	r20
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <writehex8+0x42>
 1fc:	42 2f       	mov	r20, r18
 1fe:	4f 70       	andi	r20, 0x0F	; 15
 200:	9e 01       	movw	r18, r28
 202:	2c 5f       	subi	r18, 0xFC	; 252
 204:	3f 4f       	sbci	r19, 0xFF	; 255
 206:	82 0f       	add	r24, r18
 208:	93 1f       	adc	r25, r19
 20a:	fc 01       	movw	r30, r24
 20c:	40 83       	st	Z, r20
    unsigned char shift = 0;    /* Value that represents which 4 bits to look at */
    char chars[2];  /* Initialize chars array to hold each 4 bit hex value */
    char index = sizeof(chars)-1;   /* Starting the index at the end to store the values in order */
    
    /* Loop through each 4 bit value */
    while (index >= 0) {
 20e:	8a 81       	ldd	r24, Y+2	; 0x02
 210:	88 23       	and	r24, r24
 212:	dc f6       	brge	.-74     	; 0x1ca <writehex8+0x18>
        */
        chars[index--] = (num >> (4 * shift++)) & 0x0F; 
    }

    /* Loop through chars array */
    for (char i = 0; i < sizeof(chars); i++)
 214:	1b 82       	std	Y+3, r1	; 0x03
 216:	2d c0       	rjmp	.+90     	; 0x272 <writehex8+0xc0>
    {
        if(chars[i] < 10) {
 218:	8b 81       	ldd	r24, Y+3	; 0x03
 21a:	08 2e       	mov	r0, r24
 21c:	00 0c       	add	r0, r0
 21e:	99 0b       	sbc	r25, r25
 220:	9e 01       	movw	r18, r28
 222:	2c 5f       	subi	r18, 0xFC	; 252
 224:	3f 4f       	sbci	r19, 0xFF	; 255
 226:	82 0f       	add	r24, r18
 228:	93 1f       	adc	r25, r19
 22a:	fc 01       	movw	r30, r24
 22c:	80 81       	ld	r24, Z
 22e:	8a 30       	cpi	r24, 0x0A	; 10
 230:	7c f4       	brge	.+30     	; 0x250 <writehex8+0x9e>
            uart_writechar('0' + chars[i]); /* Display ascii character if the value is between 0-9 */
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	08 2e       	mov	r0, r24
 236:	00 0c       	add	r0, r0
 238:	99 0b       	sbc	r25, r25
 23a:	9e 01       	movw	r18, r28
 23c:	2c 5f       	subi	r18, 0xFC	; 252
 23e:	3f 4f       	sbci	r19, 0xFF	; 255
 240:	82 0f       	add	r24, r18
 242:	93 1f       	adc	r25, r19
 244:	fc 01       	movw	r30, r24
 246:	80 81       	ld	r24, Z
 248:	80 5d       	subi	r24, 0xD0	; 208
 24a:	0e 94 30 02 	call	0x460	; 0x460 <uart_writechar>
 24e:	0e c0       	rjmp	.+28     	; 0x26c <writehex8+0xba>
        } else {
            uart_writechar('A' + (chars[i] - 10));  /* Display ascii character if the value is greater than 9 */
 250:	8b 81       	ldd	r24, Y+3	; 0x03
 252:	08 2e       	mov	r0, r24
 254:	00 0c       	add	r0, r0
 256:	99 0b       	sbc	r25, r25
 258:	9e 01       	movw	r18, r28
 25a:	2c 5f       	subi	r18, 0xFC	; 252
 25c:	3f 4f       	sbci	r19, 0xFF	; 255
 25e:	82 0f       	add	r24, r18
 260:	93 1f       	adc	r25, r19
 262:	fc 01       	movw	r30, r24
 264:	80 81       	ld	r24, Z
 266:	89 5c       	subi	r24, 0xC9	; 201
 268:	0e 94 30 02 	call	0x460	; 0x460 <uart_writechar>
        */
        chars[index--] = (num >> (4 * shift++)) & 0x0F; 
    }

    /* Loop through chars array */
    for (char i = 0; i < sizeof(chars); i++)
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	8b 83       	std	Y+3, r24	; 0x03
 272:	8b 81       	ldd	r24, Y+3	; 0x03
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	80 f2       	brcs	.-96     	; 0x218 <writehex8+0x66>
            uart_writechar('0' + chars[i]); /* Display ascii character if the value is between 0-9 */
        } else {
            uart_writechar('A' + (chars[i] - 10));  /* Display ascii character if the value is greater than 9 */
        }
    }
}
 278:	00 00       	nop
 27a:	26 96       	adiw	r28, 0x06	; 6
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	de bf       	out	0x3e, r29	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	cd bf       	out	0x3d, r28	; 61
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <writehex16>:
 * NOTE: uart_init() should be called this function
 *  is invoked for the first time or unpredictable
 *  UART behavior may result.
*/
void writehex16(unsigned int num)
{
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	29 97       	sbiw	r28, 0x09	; 9
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
 2a0:	99 87       	std	Y+9, r25	; 0x09
 2a2:	88 87       	std	Y+8, r24	; 0x08
    /* Initialize variables */
    unsigned char shift = 0;    /* Value that represents which 4 bits to look at */
 2a4:	19 82       	std	Y+1, r1	; 0x01
    char chars[4];  /* Initialize chars array to hold each 4 bit hex value */
    char index = sizeof(chars)-1;   /* Starting the index at the end to store the values in order */
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	8a 83       	std	Y+2, r24	; 0x02
    
    /* Loop through each 4 bit value */
    while (index >= 0) {
 2aa:	22 c0       	rjmp	.+68     	; 0x2f0 <writehex16+0x64>
        * multiply current shift by 4 to get the current 4 bit value
        * store the 4 bit value into the chars array using and and mask
        * decrement index for next loop
        * increment shift for next loop
        */
        chars[index--] = (num >> (4 * shift++)) & 0x0F; 
 2ac:	8a 81       	ldd	r24, Y+2	; 0x02
 2ae:	98 2f       	mov	r25, r24
 2b0:	91 50       	subi	r25, 0x01	; 1
 2b2:	9a 83       	std	Y+2, r25	; 0x02
 2b4:	08 2e       	mov	r0, r24
 2b6:	00 0c       	add	r0, r0
 2b8:	99 0b       	sbc	r25, r25
 2ba:	29 81       	ldd	r18, Y+1	; 0x01
 2bc:	31 e0       	ldi	r19, 0x01	; 1
 2be:	32 0f       	add	r19, r18
 2c0:	39 83       	std	Y+1, r19	; 0x01
 2c2:	22 2f       	mov	r18, r18
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	a9 01       	movw	r20, r18
 2c8:	44 0f       	add	r20, r20
 2ca:	55 1f       	adc	r21, r21
 2cc:	44 0f       	add	r20, r20
 2ce:	55 1f       	adc	r21, r21
 2d0:	28 85       	ldd	r18, Y+8	; 0x08
 2d2:	39 85       	ldd	r19, Y+9	; 0x09
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <writehex16+0x4e>
 2d6:	36 95       	lsr	r19
 2d8:	27 95       	ror	r18
 2da:	4a 95       	dec	r20
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <writehex16+0x4a>
 2de:	42 2f       	mov	r20, r18
 2e0:	4f 70       	andi	r20, 0x0F	; 15
 2e2:	9e 01       	movw	r18, r28
 2e4:	2c 5f       	subi	r18, 0xFC	; 252
 2e6:	3f 4f       	sbci	r19, 0xFF	; 255
 2e8:	82 0f       	add	r24, r18
 2ea:	93 1f       	adc	r25, r19
 2ec:	fc 01       	movw	r30, r24
 2ee:	40 83       	st	Z, r20
    unsigned char shift = 0;    /* Value that represents which 4 bits to look at */
    char chars[4];  /* Initialize chars array to hold each 4 bit hex value */
    char index = sizeof(chars)-1;   /* Starting the index at the end to store the values in order */
    
    /* Loop through each 4 bit value */
    while (index >= 0) {
 2f0:	8a 81       	ldd	r24, Y+2	; 0x02
 2f2:	88 23       	and	r24, r24
 2f4:	dc f6       	brge	.-74     	; 0x2ac <writehex16+0x20>
        */
        chars[index--] = (num >> (4 * shift++)) & 0x0F; 
    }

    /* Loop through chars array */
    for (char i = 0; i < sizeof(chars); i++)
 2f6:	1b 82       	std	Y+3, r1	; 0x03
 2f8:	2d c0       	rjmp	.+90     	; 0x354 <writehex16+0xc8>
    {
        if(chars[i] < 10) {
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	08 2e       	mov	r0, r24
 2fe:	00 0c       	add	r0, r0
 300:	99 0b       	sbc	r25, r25
 302:	9e 01       	movw	r18, r28
 304:	2c 5f       	subi	r18, 0xFC	; 252
 306:	3f 4f       	sbci	r19, 0xFF	; 255
 308:	82 0f       	add	r24, r18
 30a:	93 1f       	adc	r25, r19
 30c:	fc 01       	movw	r30, r24
 30e:	80 81       	ld	r24, Z
 310:	8a 30       	cpi	r24, 0x0A	; 10
 312:	7c f4       	brge	.+30     	; 0x332 <writehex16+0xa6>
            uart_writechar('0' + chars[i]); /* Display ascii character if the value is between 0-9 */
 314:	8b 81       	ldd	r24, Y+3	; 0x03
 316:	08 2e       	mov	r0, r24
 318:	00 0c       	add	r0, r0
 31a:	99 0b       	sbc	r25, r25
 31c:	9e 01       	movw	r18, r28
 31e:	2c 5f       	subi	r18, 0xFC	; 252
 320:	3f 4f       	sbci	r19, 0xFF	; 255
 322:	82 0f       	add	r24, r18
 324:	93 1f       	adc	r25, r19
 326:	fc 01       	movw	r30, r24
 328:	80 81       	ld	r24, Z
 32a:	80 5d       	subi	r24, 0xD0	; 208
 32c:	0e 94 30 02 	call	0x460	; 0x460 <uart_writechar>
 330:	0e c0       	rjmp	.+28     	; 0x34e <writehex16+0xc2>
        } else {
            uart_writechar('A' + (chars[i] - 10));  /* Display ascii character if the value is greater than 9 */
 332:	8b 81       	ldd	r24, Y+3	; 0x03
 334:	08 2e       	mov	r0, r24
 336:	00 0c       	add	r0, r0
 338:	99 0b       	sbc	r25, r25
 33a:	9e 01       	movw	r18, r28
 33c:	2c 5f       	subi	r18, 0xFC	; 252
 33e:	3f 4f       	sbci	r19, 0xFF	; 255
 340:	82 0f       	add	r24, r18
 342:	93 1f       	adc	r25, r19
 344:	fc 01       	movw	r30, r24
 346:	80 81       	ld	r24, Z
 348:	89 5c       	subi	r24, 0xC9	; 201
 34a:	0e 94 30 02 	call	0x460	; 0x460 <uart_writechar>
        */
        chars[index--] = (num >> (4 * shift++)) & 0x0F; 
    }

    /* Loop through chars array */
    for (char i = 0; i < sizeof(chars); i++)
 34e:	8b 81       	ldd	r24, Y+3	; 0x03
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	8b 83       	std	Y+3, r24	; 0x03
 354:	8b 81       	ldd	r24, Y+3	; 0x03
 356:	84 30       	cpi	r24, 0x04	; 4
 358:	80 f2       	brcs	.-96     	; 0x2fa <writehex16+0x6e>
            uart_writechar('0' + chars[i]); /* Display ascii character if the value is between 0-9 */
        } else {
            uart_writechar('A' + (chars[i] - 10));  /* Display ascii character if the value is greater than 9 */
        }
    }
}
 35a:	00 00       	nop
 35c:	29 96       	adiw	r28, 0x09	; 9
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <blink_led>:
 * NOTE: Bit 1 of the DDRB (0x24) register should be set
 *  to 1 prior to calling this function or else unpredictable
 *  LED behavior may result.
*/
void blink_led(char *msg)
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	00 d0       	rcall	.+0      	; 0x374 <blink_led+0x6>
 374:	00 d0       	rcall	.+0      	; 0x376 <blink_led+0x8>
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
 37a:	9c 83       	std	Y+4, r25	; 0x04
 37c:	8b 83       	std	Y+3, r24	; 0x03
    /* Initialize registers to start with LED OFF */
    PORTB = 0x2;
 37e:	85 e2       	ldi	r24, 0x25	; 37
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	22 e0       	ldi	r18, 0x02	; 2
 384:	fc 01       	movw	r30, r24
 386:	20 83       	st	Z, r18
    PINB = 0x2;
 388:	83 e2       	ldi	r24, 0x23	; 35
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	22 e0       	ldi	r18, 0x02	; 2
 38e:	fc 01       	movw	r30, r24
 390:	20 83       	st	Z, r18
    unsigned int ind = 0; /* Set index to look at first character */
 392:	1a 82       	std	Y+2, r1	; 0x02
 394:	19 82       	std	Y+1, r1	; 0x01
    while (*(msg+ind) != 0)
 396:	4d c0       	rjmp	.+154    	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
    {
        /* If statements to check the character at the current index of the string */
        if (*(msg+ind) == '-') {    /* Check if dash */
 398:	2b 81       	ldd	r18, Y+3	; 0x03
 39a:	3c 81       	ldd	r19, Y+4	; 0x04
 39c:	89 81       	ldd	r24, Y+1	; 0x01
 39e:	9a 81       	ldd	r25, Y+2	; 0x02
 3a0:	82 0f       	add	r24, r18
 3a2:	93 1f       	adc	r25, r19
 3a4:	fc 01       	movw	r30, r24
 3a6:	80 81       	ld	r24, Z
 3a8:	8d 32       	cpi	r24, 0x2D	; 45
 3aa:	99 f4       	brne	.+38     	; 0x3d2 <blink_led+0x64>
            PINB = 0x2; /* Toggle the LED ON */
 3ac:	83 e2       	ldi	r24, 0x23	; 35
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	22 e0       	ldi	r18, 0x02	; 2
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18
            delay(750); 
 3b6:	8e ee       	ldi	r24, 0xEE	; 238
 3b8:	92 e0       	ldi	r25, 0x02	; 2
 3ba:	0e 94 7e 00 	call	0xfc	; 0xfc <delay>
            PINB = 0x2; /* Toggle the LED OFF */
 3be:	83 e2       	ldi	r24, 0x23	; 35
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	22 e0       	ldi	r18, 0x02	; 2
 3c4:	fc 01       	movw	r30, r24
 3c6:	20 83       	st	Z, r18
            delay(100);
 3c8:	84 e6       	ldi	r24, 0x64	; 100
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 7e 00 	call	0xfc	; 0xfc <delay>
 3d0:	2b c0       	rjmp	.+86     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
        } else if (*(msg+ind) == '.') { /* Check if dot */
 3d2:	2b 81       	ldd	r18, Y+3	; 0x03
 3d4:	3c 81       	ldd	r19, Y+4	; 0x04
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	9a 81       	ldd	r25, Y+2	; 0x02
 3da:	82 0f       	add	r24, r18
 3dc:	93 1f       	adc	r25, r19
 3de:	fc 01       	movw	r30, r24
 3e0:	80 81       	ld	r24, Z
 3e2:	8e 32       	cpi	r24, 0x2E	; 46
 3e4:	99 f4       	brne	.+38     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
            PINB = 0x2; /* Toggle the LED ON */
 3e6:	83 e2       	ldi	r24, 0x23	; 35
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	22 e0       	ldi	r18, 0x02	; 2
 3ec:	fc 01       	movw	r30, r24
 3ee:	20 83       	st	Z, r18
            delay(250);
 3f0:	8a ef       	ldi	r24, 0xFA	; 250
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 7e 00 	call	0xfc	; 0xfc <delay>
            PINB = 0x2; /* Toggle the LED OFF */
 3f8:	83 e2       	ldi	r24, 0x23	; 35
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	22 e0       	ldi	r18, 0x02	; 2
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
            delay(100);
 402:	84 e6       	ldi	r24, 0x64	; 100
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 7e 00 	call	0xfc	; 0xfc <delay>
 40a:	0e c0       	rjmp	.+28     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
        } else if (*(msg+ind) == ' ') { /* Check if space */
 40c:	2b 81       	ldd	r18, Y+3	; 0x03
 40e:	3c 81       	ldd	r19, Y+4	; 0x04
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	9a 81       	ldd	r25, Y+2	; 0x02
 414:	82 0f       	add	r24, r18
 416:	93 1f       	adc	r25, r19
 418:	fc 01       	movw	r30, r24
 41a:	80 81       	ld	r24, Z
 41c:	80 32       	cpi	r24, 0x20	; 32
 41e:	21 f4       	brne	.+8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
            delay(1000);  /* Leave LED toggled OFF */
 420:	88 ee       	ldi	r24, 0xE8	; 232
 422:	93 e0       	ldi	r25, 0x03	; 3
 424:	0e 94 7e 00 	call	0xfc	; 0xfc <delay>
        }
        ind++;
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	9a 81       	ldd	r25, Y+2	; 0x02
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	9a 83       	std	Y+2, r25	; 0x02
 430:	89 83       	std	Y+1, r24	; 0x01
{
    /* Initialize registers to start with LED OFF */
    PORTB = 0x2;
    PINB = 0x2;
    unsigned int ind = 0; /* Set index to look at first character */
    while (*(msg+ind) != 0)
 432:	2b 81       	ldd	r18, Y+3	; 0x03
 434:	3c 81       	ldd	r19, Y+4	; 0x04
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	9a 81       	ldd	r25, Y+2	; 0x02
 43a:	82 0f       	add	r24, r18
 43c:	93 1f       	adc	r25, r19
 43e:	fc 01       	movw	r30, r24
 440:	80 81       	ld	r24, Z
 442:	88 23       	and	r24, r24
 444:	09 f0       	breq	.+2      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 446:	a8 cf       	rjmp	.-176    	; 0x398 <blink_led+0x2a>
        } else if (*(msg+ind) == ' ') { /* Check if space */
            delay(1000);  /* Leave LED toggled OFF */
        }
        ind++;
    }
}
 448:	00 00       	nop
 44a:	0f 90       	pop	r0
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <uart_init>:
 458:	0e 94 32 02 	call	0x464	; 0x464 <serial_init>
 45c:	78 94       	sei
 45e:	08 95       	ret

00000460 <uart_writechar>:
 460:	0c 94 ca 02 	jmp	0x594	; 0x594 <serial_writechar>

00000464 <serial_init>:
 464:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 468:	87 e6       	ldi	r24, 0x67	; 103
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 470:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 474:	e1 ec       	ldi	r30, 0xC1	; 193
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	88 e1       	ldi	r24, 0x18	; 24
 47a:	80 83       	st	Z, r24
 47c:	86 e0       	ldi	r24, 0x06	; 6
 47e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 482:	80 81       	ld	r24, Z
 484:	80 6a       	ori	r24, 0xA0	; 160
 486:	80 83       	st	Z, r24
 488:	08 95       	ret

0000048a <__vector_18>:
 48a:	1f 92       	push	r1
 48c:	0f 92       	push	r0
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	0f 92       	push	r0
 492:	11 24       	eor	r1, r1
 494:	2f 93       	push	r18
 496:	8f 93       	push	r24
 498:	9f 93       	push	r25
 49a:	ef 93       	push	r30
 49c:	ff 93       	push	r31
 49e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <rxtail>
 4a2:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <rxhead>
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	82 1b       	sub	r24, r18
 4aa:	91 09       	sbc	r25, r1
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	8f 73       	andi	r24, 0x3F	; 63
 4b0:	99 27       	eor	r25, r25
 4b2:	89 2b       	or	r24, r25
 4b4:	79 f0       	breq	.+30     	; 0x4d4 <__vector_18+0x4a>
 4b6:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <rxhead>
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4c0:	e2 5d       	subi	r30, 0xD2	; 210
 4c2:	fe 4f       	sbci	r31, 0xFE	; 254
 4c4:	80 83       	st	Z, r24
 4c6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxhead>
 4ca:	8f 5f       	subi	r24, 0xFF	; 255
 4cc:	8f 73       	andi	r24, 0x3F	; 63
 4ce:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <rxhead>
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__vector_18+0x4e>
 4d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	9f 91       	pop	r25
 4de:	8f 91       	pop	r24
 4e0:	2f 91       	pop	r18
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <__vector_19>:
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	2f 93       	push	r18
 4f8:	8f 93       	push	r24
 4fa:	9f 93       	push	r25
 4fc:	ef 93       	push	r30
 4fe:	ff 93       	push	r31
 500:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <txhead>
 504:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	82 1b       	sub	r24, r18
 50c:	91 09       	sbc	r25, r1
 50e:	8f 73       	andi	r24, 0x3F	; 63
 510:	99 27       	eor	r25, r25
 512:	89 2b       	or	r24, r25
 514:	79 f0       	breq	.+30     	; 0x534 <__vector_19+0x48>
 516:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	e2 59       	subi	r30, 0x92	; 146
 51e:	fe 4f       	sbci	r31, 0xFE	; 254
 520:	80 81       	ld	r24, Z
 522:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 526:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 52a:	8f 5f       	subi	r24, 0xFF	; 255
 52c:	8f 73       	andi	r24, 0x3F	; 63
 52e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 532:	05 c0       	rjmp	.+10     	; 0x53e <__vector_19+0x52>
 534:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 538:	8f 7d       	andi	r24, 0xDF	; 223
 53a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 53e:	ff 91       	pop	r31
 540:	ef 91       	pop	r30
 542:	9f 91       	pop	r25
 544:	8f 91       	pop	r24
 546:	2f 91       	pop	r18
 548:	0f 90       	pop	r0
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	0f 90       	pop	r0
 54e:	1f 90       	pop	r1
 550:	18 95       	reti

00000552 <serial_rxchars>:
 552:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxhead>
 556:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <rxtail>
 55a:	89 1b       	sub	r24, r25
 55c:	8f 73       	andi	r24, 0x3F	; 63
 55e:	08 95       	ret

00000560 <serial_popchar>:
 560:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxhead>
 564:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <rxtail>
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	82 1b       	sub	r24, r18
 56c:	91 09       	sbc	r25, r1
 56e:	8f 73       	andi	r24, 0x3F	; 63
 570:	99 27       	eor	r25, r25
 572:	89 2b       	or	r24, r25
 574:	69 f0       	breq	.+26     	; 0x590 <serial_popchar+0x30>
 576:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <rxtail>
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	e2 5d       	subi	r30, 0xD2	; 210
 57e:	fe 4f       	sbci	r31, 0xFE	; 254
 580:	80 81       	ld	r24, Z
 582:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <rxtail>
 586:	9f 5f       	subi	r25, 0xFF	; 255
 588:	9f 73       	andi	r25, 0x3F	; 63
 58a:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <rxtail>
 58e:	08 95       	ret
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	08 95       	ret

00000594 <serial_writechar>:
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	07 fe       	sbrs	r0, 7
 598:	0e c0       	rjmp	.+28     	; 0x5b6 <serial_writechar+0x22>
 59a:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
 59e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <txhead>
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	29 1b       	sub	r18, r25
 5a6:	31 09       	sbc	r19, r1
 5a8:	21 50       	subi	r18, 0x01	; 1
 5aa:	31 09       	sbc	r19, r1
 5ac:	2f 73       	andi	r18, 0x3F	; 63
 5ae:	33 27       	eor	r19, r19
 5b0:	23 2b       	or	r18, r19
 5b2:	99 f3       	breq	.-26     	; 0x59a <serial_writechar+0x6>
 5b4:	0d c0       	rjmp	.+26     	; 0x5d0 <serial_writechar+0x3c>
 5b6:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
 5ba:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <txhead>
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	29 1b       	sub	r18, r25
 5c2:	31 09       	sbc	r19, r1
 5c4:	21 50       	subi	r18, 0x01	; 1
 5c6:	31 09       	sbc	r19, r1
 5c8:	2f 73       	andi	r18, 0x3F	; 63
 5ca:	33 27       	eor	r19, r19
 5cc:	23 2b       	or	r18, r19
 5ce:	61 f0       	breq	.+24     	; 0x5e8 <serial_writechar+0x54>
 5d0:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <txhead>
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	e2 59       	subi	r30, 0x92	; 146
 5d8:	fe 4f       	sbci	r31, 0xFE	; 254
 5da:	80 83       	st	Z, r24
 5dc:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <txhead>
 5e0:	8f 5f       	subi	r24, 0xFF	; 255
 5e2:	8f 73       	andi	r24, 0x3F	; 63
 5e4:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <txhead>
 5e8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 5ec:	80 62       	ori	r24, 0x20	; 32
 5ee:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 5f2:	08 95       	ret

000005f4 <serial_writestr>:
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	ec 01       	movw	r28, r24
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	11 e0       	ldi	r17, 0x01	; 1
 600:	18 0f       	add	r17, r24
 602:	fe 01       	movw	r30, r28
 604:	e8 0f       	add	r30, r24
 606:	f1 1d       	adc	r31, r1
 608:	80 81       	ld	r24, Z
 60a:	88 23       	and	r24, r24
 60c:	21 f0       	breq	.+8      	; 0x616 <serial_writestr+0x22>
 60e:	0e 94 ca 02 	call	0x594	; 0x594 <serial_writechar>
 612:	81 2f       	mov	r24, r17
 614:	f4 cf       	rjmp	.-24     	; 0x5fe <serial_writestr+0xa>
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	1f 91       	pop	r17
 61c:	08 95       	ret

0000061e <serial_writestr_P>:
 61e:	1f 93       	push	r17
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	ec 01       	movw	r28, r24
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	11 e0       	ldi	r17, 0x01	; 1
 62a:	18 0f       	add	r17, r24
 62c:	fe 01       	movw	r30, r28
 62e:	e8 0f       	add	r30, r24
 630:	f1 1d       	adc	r31, r1
 632:	84 91       	lpm	r24, Z
 634:	88 23       	and	r24, r24
 636:	21 f0       	breq	.+8      	; 0x640 <serial_writestr_P+0x22>
 638:	0e 94 ca 02 	call	0x594	; 0x594 <serial_writechar>
 63c:	81 2f       	mov	r24, r17
 63e:	f4 cf       	rjmp	.-24     	; 0x628 <serial_writestr_P+0xa>
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	1f 91       	pop	r17
 646:	08 95       	ret

00000648 <_exit>:
 648:	f8 94       	cli

0000064a <__stop_program>:
 64a:	ff cf       	rjmp	.-2      	; 0x64a <__stop_program>
